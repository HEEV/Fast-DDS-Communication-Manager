// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GPSPosition.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PacketTypes/GPSPosition.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

GPSPosition::GPSPosition()
{
    // m_head com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6e2c9341

    // m_lat com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1442d7b5
    m_lat = 0.0;
    // m_lng com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1efee8e7
    m_lng = 0.0;
    // m_alt com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1ee807c6
    m_alt = 0.0;

}

GPSPosition::~GPSPosition()
{




}

GPSPosition::GPSPosition(
        const GPSPosition& x)
{
    m_head = x.m_head;
    m_lat = x.m_lat;
    m_lng = x.m_lng;
    m_alt = x.m_alt;
}

GPSPosition::GPSPosition(
        GPSPosition&& x) noexcept 
{
    m_head = std::move(x.m_head);
    m_lat = x.m_lat;
    m_lng = x.m_lng;
    m_alt = x.m_alt;
}

GPSPosition& GPSPosition::operator =(
        const GPSPosition& x)
{

    m_head = x.m_head;
    m_lat = x.m_lat;
    m_lng = x.m_lng;
    m_alt = x.m_alt;

    return *this;
}

GPSPosition& GPSPosition::operator =(
        GPSPosition&& x) noexcept
{

    m_head = std::move(x.m_head);
    m_lat = x.m_lat;
    m_lng = x.m_lng;
    m_alt = x.m_alt;

    return *this;
}

bool GPSPosition::operator ==(
        const GPSPosition& x) const
{

    return (m_head == x.m_head && m_lat == x.m_lat && m_lng == x.m_lng && m_alt == x.m_alt);
}

bool GPSPosition::operator !=(
        const GPSPosition& x) const
{
    return !(*this == x);
}

size_t GPSPosition::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t GPSPosition::getCdrSerializedSize(
        const GPSPosition& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getCdrSerializedSize(data.head(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void GPSPosition::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_head;
    scdr << m_lat;
    scdr << m_lng;
    scdr << m_alt;

}

void GPSPosition::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_head;
    dcdr >> m_lat;
    dcdr >> m_lng;
    dcdr >> m_alt;
}

/*!
 * @brief This function copies the value in member head
 * @param _head New value to be copied in member head
 */
void GPSPosition::head(
        const Header& _head)
{
    m_head = _head;
}

/*!
 * @brief This function moves the value in member head
 * @param _head New value to be moved in member head
 */
void GPSPosition::head(
        Header&& _head)
{
    m_head = std::move(_head);
}

/*!
 * @brief This function returns a constant reference to member head
 * @return Constant reference to member head
 */
const Header& GPSPosition::head() const
{
    return m_head;
}

/*!
 * @brief This function returns a reference to member head
 * @return Reference to member head
 */
Header& GPSPosition::head()
{
    return m_head;
}
/*!
 * @brief This function sets a value in member lat
 * @param _lat New value for member lat
 */
void GPSPosition::lat(
        double _lat)
{
    m_lat = _lat;
}

/*!
 * @brief This function returns the value of member lat
 * @return Value of member lat
 */
double GPSPosition::lat() const
{
    return m_lat;
}

/*!
 * @brief This function returns a reference to member lat
 * @return Reference to member lat
 */
double& GPSPosition::lat()
{
    return m_lat;
}

/*!
 * @brief This function sets a value in member lng
 * @param _lng New value for member lng
 */
void GPSPosition::lng(
        double _lng)
{
    m_lng = _lng;
}

/*!
 * @brief This function returns the value of member lng
 * @return Value of member lng
 */
double GPSPosition::lng() const
{
    return m_lng;
}

/*!
 * @brief This function returns a reference to member lng
 * @return Reference to member lng
 */
double& GPSPosition::lng()
{
    return m_lng;
}

/*!
 * @brief This function sets a value in member alt
 * @param _alt New value for member alt
 */
void GPSPosition::alt(
        double _alt)
{
    m_alt = _alt;
}

/*!
 * @brief This function returns the value of member alt
 * @return Value of member alt
 */
double GPSPosition::alt() const
{
    return m_alt;
}

/*!
 * @brief This function returns a reference to member alt
 * @return Reference to member alt
 */
double& GPSPosition::alt()
{
    return m_alt;
}


size_t GPSPosition::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool GPSPosition::isKeyDefined()
{
    return false;
}

void GPSPosition::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}
