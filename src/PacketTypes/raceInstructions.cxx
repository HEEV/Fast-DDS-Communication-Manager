// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file raceInstructions.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PacketTypes/raceInstructions.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


RaceInstructions::RaceInstructions()
{
    // m_head com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4f9a3314

    // m_inst com.eprosima.idl.parser.typecode.EnumTypeCode@176d53b2
    m_inst = ::START_RACE;

}

RaceInstructions::~RaceInstructions()
{


}

RaceInstructions::RaceInstructions(
        const RaceInstructions& x)
{
    m_head = x.m_head;
    m_inst = x.m_inst;
}

RaceInstructions::RaceInstructions(
        RaceInstructions&& x) noexcept 
{
    m_head = std::move(x.m_head);
    m_inst = x.m_inst;
}

RaceInstructions& RaceInstructions::operator =(
        const RaceInstructions& x)
{

    m_head = x.m_head;
    m_inst = x.m_inst;

    return *this;
}

RaceInstructions& RaceInstructions::operator =(
        RaceInstructions&& x) noexcept
{

    m_head = std::move(x.m_head);
    m_inst = x.m_inst;

    return *this;
}

bool RaceInstructions::operator ==(
        const RaceInstructions& x) const
{

    return (m_head == x.m_head && m_inst == x.m_inst);
}

bool RaceInstructions::operator !=(
        const RaceInstructions& x) const
{
    return !(*this == x);
}

size_t RaceInstructions::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t RaceInstructions::getCdrSerializedSize(
        const RaceInstructions& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getCdrSerializedSize(data.head(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void RaceInstructions::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_head;
    scdr << (uint32_t)m_inst;

}

void RaceInstructions::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_head;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_inst = (Instruction)enum_value;
    }

}

/*!
 * @brief This function copies the value in member head
 * @param _head New value to be copied in member head
 */
void RaceInstructions::head(
        const Header& _head)
{
    m_head = _head;
}

/*!
 * @brief This function moves the value in member head
 * @param _head New value to be moved in member head
 */
void RaceInstructions::head(
        Header&& _head)
{
    m_head = std::move(_head);
}

/*!
 * @brief This function returns a constant reference to member head
 * @return Constant reference to member head
 */
const Header& RaceInstructions::head() const
{
    return m_head;
}

/*!
 * @brief This function returns a reference to member head
 * @return Reference to member head
 */
Header& RaceInstructions::head()
{
    return m_head;
}
/*!
 * @brief This function sets a value in member inst
 * @param _inst New value for member inst
 */
void RaceInstructions::inst(
        Instruction _inst)
{
    m_inst = _inst;
}

/*!
 * @brief This function returns the value of member inst
 * @return Value of member inst
 */
Instruction RaceInstructions::inst() const
{
    return m_inst;
}

/*!
 * @brief This function returns a reference to member inst
 * @return Reference to member inst
 */
Instruction& RaceInstructions::inst()
{
    return m_inst;
}


size_t RaceInstructions::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool RaceInstructions::isKeyDefined()
{
    return false;
}

void RaceInstructions::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
