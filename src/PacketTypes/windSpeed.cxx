// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file windSpeed.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PacketTypes/windSpeed.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

WindSpeed::WindSpeed()
{
    // m_head com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4c40b76e

    // m_headSpeed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2ea6137
    m_headSpeed = 0.0;

}

WindSpeed::~WindSpeed()
{


}

WindSpeed::WindSpeed(
        const WindSpeed& x)
{
    m_head = x.m_head;
    m_headSpeed = x.m_headSpeed;
}

WindSpeed::WindSpeed(
        WindSpeed&& x) noexcept 
{
    m_head = std::move(x.m_head);
    m_headSpeed = x.m_headSpeed;
}

WindSpeed& WindSpeed::operator =(
        const WindSpeed& x)
{

    m_head = x.m_head;
    m_headSpeed = x.m_headSpeed;

    return *this;
}

WindSpeed& WindSpeed::operator =(
        WindSpeed&& x) noexcept
{

    m_head = std::move(x.m_head);
    m_headSpeed = x.m_headSpeed;

    return *this;
}

bool WindSpeed::operator ==(
        const WindSpeed& x) const
{

    return (m_head == x.m_head && m_headSpeed == x.m_headSpeed);
}

bool WindSpeed::operator !=(
        const WindSpeed& x) const
{
    return !(*this == x);
}

size_t WindSpeed::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t WindSpeed::getCdrSerializedSize(
        const WindSpeed& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getCdrSerializedSize(data.head(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void WindSpeed::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_head;
    scdr << m_headSpeed;

}

void WindSpeed::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_head;
    dcdr >> m_headSpeed;
}

/*!
 * @brief This function copies the value in member head
 * @param _head New value to be copied in member head
 */
void WindSpeed::head(
        const Header& _head)
{
    m_head = _head;
}

/*!
 * @brief This function moves the value in member head
 * @param _head New value to be moved in member head
 */
void WindSpeed::head(
        Header&& _head)
{
    m_head = std::move(_head);
}

/*!
 * @brief This function returns a constant reference to member head
 * @return Constant reference to member head
 */
const Header& WindSpeed::head() const
{
    return m_head;
}

/*!
 * @brief This function returns a reference to member head
 * @return Reference to member head
 */
Header& WindSpeed::head()
{
    return m_head;
}
/*!
 * @brief This function sets a value in member headSpeed
 * @param _headSpeed New value for member headSpeed
 */
void WindSpeed::headSpeed(
        float _headSpeed)
{
    m_headSpeed = _headSpeed;
}

/*!
 * @brief This function returns the value of member headSpeed
 * @return Value of member headSpeed
 */
float WindSpeed::headSpeed() const
{
    return m_headSpeed;
}

/*!
 * @brief This function returns a reference to member headSpeed
 * @return Reference to member headSpeed
 */
float& WindSpeed::headSpeed()
{
    return m_headSpeed;
}


size_t WindSpeed::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool WindSpeed::isKeyDefined()
{
    return false;
}

void WindSpeed::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
